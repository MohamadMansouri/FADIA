[General]

# random numbers
seed-0-mt=2


#display
**.displayEnergyStorages = true

#stats
*.prover[*].**.scalar-recording = false
#**.vector-recording = false
**.keyrevokedsig:vector.vector-recording= false
*.collector[*].collectorapp.elapsedtimesig:last.scalar-recording =false
*.collector[*].collectorapp.reportsize:vector.vector-recording = false
*.prover[*].proverapp.reportsent:vector.vector-recording =false
*.prover[*].proverapp.datasent:vector.vector-recording =false
*.prover[*].proverapp.datarcvd:vector.vector-recording =false
*.prover[*].proverapp.crashtime:vector.vector-recording =false
*.prover[*].proverapp.energyStorage:vector.vector-recording = false

[Config Fadia]
#10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000, 20000..100000 step 20000, 400000
network = Fadia
*.numCollectors = 1
*.numProvers = ${nprover=10, 25, 50, 100, 150, 250,350, 500}
*.percentself = ${p=0,2, 5, 10, 20, 40, 50, 60}
*.numself=${selfish=int(floor($p*$nprover/100))}
*.keyRingSize = ${ringsize = 300}
*.keyPoolSize = ${poolsize = 100000}
*.statadapt = ${fair=false, true}
*.prover[*].type = index % 2 + 2
#*.drop = ${pdrop=1,2,3,4,5}
*.htime = 600
# power
# status
**.hasStatus = true
*.prover[*].energyStorage.typename = "SimpleEpEnergyStorage"
*.prover[*].energyStorage.nominalCapacity = 1000J
*.prover[*].energyStorage.initialCapacity = ${bdist=uniform(100J, this.nominalCapacity),truncnormal(500J, 200J),pareto_shifted(0.5, 8J,0J), 1000J - pareto_shifted(0.5, 8J,0J)}


*.width = ${width = 300}
*.height = ${height = 300}


#mobility
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = ${width}m
**.constraintAreaMaxY = ${height}m
**.constraintAreaMaxZ = 0m

*.prover[*].mobility.typename = ${mobility="RandomWaypointMobility"}
#*.prover[*].mobility.typename = ${mobility="StationaryMobility"}
*.prover[*].mobility.speed = uniform(1mps,2mps)
*.prover[*].aggsize = ${aggsize=1,999999}


#range of communication of prover = 55m
*.prover[*].range = 55




[Config Fadia-tree]
#10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000, 20000..100000 step 20000, 400000
network = Fadiatree
*.numCollectors = 1

*.numProvers = ${nprover=10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000, 20000..100000 step 20000,  200000..900000 step 200000, 1000000 }

*.keyRingSize = 300
*.keyPoolSize = 301
*.neighbors = ${degree=2, 4, 8}
*.prover[*].neighbors = ${degree}
*.maxdepth = 9999
*.prover[*].type = index % 2 + 2
*.htime = 600


[Config Fadia-tree-fair]
#10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000, 20000..100000 step 20000, 400000
network = Fadiatreefair
*.numCollectors = 1
*.numProvers = ${nprover=10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000 }
*.keyRingSize = 300
*.keyPoolSize = 301
*.neighbors = ${degree=20}
*.prover[*].neighbors = ${degree}
*.maxdepth = 9999
*.prover[*].type = index % 2 + 2
*.htime = 600



[Config Fadia-chain]
#10, 20, 40, 100, 1000, 5000, 10000, 50000 100000, 300000, 600000, 1000000
network = Faidachain
*.numCollectors = 1
*.numProvers = ${nprover=10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000}
*.keyRingSize = 300
*.keyPoolSize = 301
*.neighbors = 2
*.maxdepth = 9999
*.prover[*].neighbors = 2
*.htime = 600

[Config Fadia-ring]
#10, 20, 40, 100, 1000, 5000, 10000, 50000 100000, 300000, 600000, 1000000
network = Fadiaring
*.numCollectors = 1
*.numProvers = ${nprover=10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000}
*.keyRingSize = 300
*.keyPoolSize = 301
*.neighbors = 2
*.maxdepth = 9999
*.prover[*].neighbors = 2
*.htime = 600

[Config Fadia-star]
#10, 20, 40, 100, 1000, 5000, 10000, 50000 100000, 300000, 600000, 1000000
network = Fadiastar
*.numCollectors = 1
*.numProvers = ${nprover=10, 20..100 step 20, 200..1000 step 200, 2000..10000 step 2000, 20000..100000 step 20000}
*.keyRingSize = 300
*.keyPoolSize = 301
*.neighbors = 4
*.maxdepth = 9999
*.prover[*].neighbors = 4
*.htime = 600
