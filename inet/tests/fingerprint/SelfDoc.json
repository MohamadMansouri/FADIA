{
 "inet.applications.ethernet.EtherAppClient": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketStatusInd::SOCKET_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::SocketInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketCommandCode::SOCKET_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Request",
    "kind": "2 (inet::SocketCommandCode::SOCKET_C_OPEN)",
    "ctrl": "inet::Ieee8022LlcSocketOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EtherAppReq"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   },
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "100",
    "ctrl": "",
    "tags": [],
    "msgname": "generateNextPacket",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "101",
    "ctrl": "",
    "tags": [],
    "msgname": "generateNextPacket",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::Ieee802SapReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::Ieee802SapReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ]
 },
 "inet.applications.ethernet.EtherAppServer": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketStatusInd::SOCKET_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::SocketInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketCommandCode::SOCKET_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Request",
    "kind": "2 (inet::SocketCommandCode::SOCKET_C_OPEN)",
    "ctrl": "inet::Ieee8022LlcSocketOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EtherAppResp"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EtherAppReq"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   },
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::Ieee802SapReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::Ieee802SapReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ieee802SapInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressInd"
   }
  ]
 },
 "inet.applications.pingapp.PingApp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketInd",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::Ipv4SocketBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::IcmpEchoRequest"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::IcmpHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "1001 (inet::PingSelfKinds::PING_FIRST_ADDR)",
    "ctrl": "",
    "tags": [],
    "msgname": "sendPing",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "1003 (inet::PingSelfKinds::PING_SEND)",
    "ctrl": "",
    "tags": [],
    "msgname": "sendPing",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::HopLimitInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.applications.tcpapp.TcpEchoApp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::PacketProtocolTag",
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::PacketProtocolTag",
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "4 (inet::TcpCommandCode::TCP_C_SEND)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "2 (inet::TcpCommandCode::TCP_C_OPEN_PASSIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "3 (inet::TcpCommandCode::TCP_C_ACCEPT)",
    "ctrl": "inet::TcpAcceptCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   }
  ]
 },
 "inet.applications.tcpapp.TcpSessionApp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::PacketProtocolTag",
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "4 (inet::TcpCommandCode::TCP_C_SEND)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::TcpCommandCode::TCP_C_OPEN_ACTIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ApplicationPacket"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   },
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "1",
    "ctrl": "",
    "tags": [],
    "msgname": "timer",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "2",
    "ctrl": "",
    "tags": [],
    "msgname": "timer",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "3",
    "ctrl": "",
    "tags": [],
    "msgname": "timer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.applications.tcpapp.TcpSinkApp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "2 (inet::TcpCommandCode::TCP_C_OPEN_PASSIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "3 (inet::TcpCommandCode::TCP_C_ACCEPT)",
    "ctrl": "inet::TcpAcceptCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketInd"
   }
  ]
 },
 "inet.applications.udpapp.UdpBasicApp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Indication",
    "kind": "2 (inet::UdpStatusInd::UDP_I_SOCKET_CLOSED)",
    "ctrl": "inet::UdpSocketClosedIndication",
    "tags": [
     "inet::SocketInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::L4PortReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "4 (inet::UdpCommandCode::UDP_C_CLOSE)",
    "ctrl": "inet::UdpCloseCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ApplicationPacket"
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "1",
    "ctrl": "",
    "tags": [],
    "msgname": "sendTimer",
    "context": ""
   },
   {
    "msg": "inet::ClockEvent",
    "kind": "2",
    "ctrl": "",
    "tags": [],
    "msgname": "sendTimer",
    "context": ""
   },
   {
    "msg": "inet::ClockEvent",
    "kind": "3",
    "ctrl": "",
    "tags": [],
    "msgname": "sendTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L4PortReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.applications.udpapp.UdpSink": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::FragmentTag",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "3 (inet::UdpCommandCode::UDP_C_SETOPTION)",
    "ctrl": "inet::UdpJoinMulticastGroupsCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Chunk"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "1",
    "ctrl": "",
    "tags": [],
    "msgname": "UDPSinkTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.applications.udpapp.UdpSocketIo": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "trafficIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::VlanReq"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::SocketReq",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "2 (inet::UdpCommandCode::UDP_C_CONNECT)",
    "ctrl": "inet::UdpConnectCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.applications.udpapp.UdpVideoStreamClient": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::L4PortReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "RTAG": [
   {
    "tagAction": "getAllTags",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "UDPVideoStreamStart",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L4PortReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.applications.udpapp.UdpVideoStreamServer": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::L4PortReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "VideoStreamTmr",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L4PortReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L4PortInd"
   }
  ]
 },
 "inet.applications.voipstream.VoipStreamReceiver": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "socketIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::VoipStreamPacket"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::VoipStreamPacket"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L4PortInd"
   }
  ]
 },
 "inet.applications.voipstream.VoipStreamSender": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "OUTPUT": [
   {
    "gate": "socketOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::L4PortReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "socketOut",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::VoipStreamPacket"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "SILENCE",
    "context": ""
   },
   {
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "VOICE",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "sendVoIP",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L4PortReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.common.MessageDispatcher": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyProtocol",
    "info": "handleRegisterAnyProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyService",
    "info": "handleRegisterAnyService"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.common.QosClassifier",
    "function": "inet::QosClassifier::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.linklayer.common.QosClassifier",
    "function": "inet::QosClassifier::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetEncapsulation",
    "function": "inet::EthernetEncapsulation::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetEncapsulation",
    "function": "inet::EthernetEncapsulation::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSink",
    "function": "inet::EthernetCutthroughSink::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSink",
    "function": "inet::EthernetCutthroughSink::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetMacHeaderChecker",
    "function": "inet::EthernetMacHeaderChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ieee80211.llc.Ieee80211LlcLpd",
    "function": "inet::ieee80211::Ieee80211LlcLpd::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.linklayer.ieee80211.llc.Ieee80211LlcLpd",
    "function": "inet::ieee80211::Ieee80211LlcLpd::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.linklayer.ieee8022.Ieee8022Llc",
    "function": "inet::Ieee8022Llc::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.linklayer.ieee8022.Ieee8022Llc",
    "function": "inet::Ieee8022Llc::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.icmpv6.Icmpv6",
    "function": "inet::Icmpv6::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.icmpv6.Icmpv6",
    "function": "inet::Icmpv6::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Icmp",
    "function": "inet::Icmp::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.ipv4.Icmp",
    "function": "inet::Icmp::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Igmpv2",
    "function": "inet::Igmpv2::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.ipv4.Igmpv2",
    "function": "inet::Igmpv2::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6",
    "function": "inet::Ipv6::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6",
    "function": "inet::Ipv6::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.PacketQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   }
  ],
  "OUTPUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SocketReq"
   }
  ]
 },
 "inet.common.packet.recorder.PcapRecorder": {
  "PACKET": [
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeaderBase"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   },
   {
    "packetAction": "setFrontOffset",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.common.scenario.ScenarioManager": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ScenarioTimer",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "scenario-event",
    "context": ""
   }
  ]
 },
 "inet.examples.eigrp.basic.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.snake.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.square_stub.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.square_stub_mesh.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.testing_scenario6.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.testing_scenario_ds.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.testing_scenario.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.two_node6.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.eigrp.two_node.EigrpTestNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.inet.bulktransfer.BulkTransfer": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.inet.tcpclientserver.ClientServer": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.ipv6.ipv6bulk.BulkTransfer6": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.voipstream.VoIPStreamLargeNet.VoIPStreamLargeNet": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetCsmaMac",
    "function": "inet::EthernetCsmaMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.node.ethernet.EthernetHub",
    "function": "inet::physicallayer::WireJunction::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.physicallayer.wired.common.WireJunction",
    "function": "inet::physicallayer::WireJunction::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.voipstream.VoIPStreamTest.VoIPStreamTest": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.examples.voipstream.VoIPStreamTrafficTest.VoIPStreamTrafficTest": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.linklayer.acking.AckingMac": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadio",
    "function": "inet::physicallayer::UnitDiskRadio::setRadioMode",
    "info": "setRadioMode"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::AckingMacHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::AckingMacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::AckingMacHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.acking.AckingWirelessInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.common.QosClassifier": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.llc.Ieee80211LlcLpd",
    "function": "inet::ieee80211::Ieee80211LlcLpd::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.linklayer.ieee80211.llc.Ieee80211LlcLpd",
    "function": "inet::ieee80211::Ieee80211LlcLpd::handleRegisterService",
    "info": "handleRegisterService"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::UdpHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::UserPriorityReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.common.WirelessInterface": {
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ethernet.basic.EthernetCsmaMac": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetCsmaMac",
    "function": "inet::EthernetCsmaMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetCsmaMac",
    "function": "inet::EthernetCsmaMac::refreshConnection",
    "info": "refreshConnection"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "INPUT": [
   {
    "gate": "phys$i",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "phys$o",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   },
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   },
   {
    "packetAction": "removeAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "100",
    "ctrl": "",
    "tags": [],
    "msgname": "EndIFG",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "101",
    "ctrl": "",
    "tags": [],
    "msgname": "EndReception",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "103",
    "ctrl": "",
    "tags": [],
    "msgname": "EndTransmission",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ethernet.basic.EthernetEncapsulation": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketCommandCode::SOCKET_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Request",
    "kind": "2 (inet::SocketCommandCode::SOCKET_C_OPEN)",
    "ctrl": "inet::Ieee8022LlcSocketOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Request",
    "kind": "2 (inet::SocketCommandCode::SOCKET_C_OPEN)",
    "ctrl": "inet::Ieee8022LlcSocketOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapReq",
     "inet::SocketReq"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::SocketStatusInd::SOCKET_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::SocketInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ieee8022LlcHeader"
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ieee8022LlcHeader"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::Ieee802SapInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::Ieee802SapInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ieee802SapReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ethernet.basic.EthernetMac": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::refreshConnection",
    "info": "refreshConnection"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "INPUT": [
   {
    "gate": "phys$i",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "phys$o",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetPadding"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   },
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   },
   {
    "packetAction": "removeAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "100",
    "ctrl": "",
    "tags": [],
    "msgname": "EndIFG",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "103",
    "ctrl": "",
    "tags": [],
    "msgname": "EndTransmission",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ethernet.basic.OmittedEthernetEncapsulation": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.linklayer.ethernet.common.EthernetFrameClassifier": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.linklayer.ethernet.common.EthernetQosQueue": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.common.EthernetFrameClassifier",
    "function": "inet::EthernetFrameClassifier::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::pullPacket",
    "info": "pullPacket"
   }
  ],
  "PULL_IN": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.linklayer.ethernet.common.EthernetQueue": {
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee802SapReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::QueueingTimeTag"
   }
  ]
 },
 "inet.linklayer.ethernet.common.MacRelayUnit": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyProtocol",
    "info": "handleRegisterAnyProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyService",
    "info": "handleRegisterAnyService"
   },
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::getInterfaceIdForAddress",
    "info": "getInterfaceIdForAddress"
   },
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::updateTableWithAddress",
    "info": "updateTableWithAddress"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::UserPriorityInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::VlanInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ]
 },
 "inet.linklayer.ethernet.EthernetInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ethernet.LayeredEthernetInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetCutthroughInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetCutthroughSink": {
  "CALL": [
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "cutthroughIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "EndStreamingTimer",
    "context": ""
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetCutthroughSource": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::getInterfaceIdForAddress",
    "info": "getInterfaceIdForAddress"
   },
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::updateTableWithAddress",
    "info": "updateTableWithAddress"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSource",
    "function": "inet::EthernetCutthroughSource::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacAddressFields"
   },
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "cutthroughOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "CutthroughTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetFcsChecker": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::EthernetFcs"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetFcsInserter": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.common.PacketStreamer",
    "function": "inet::PacketStreamer::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.PacketStreamer",
    "function": "inet::PacketStreamer::pullPacketStart",
    "info": "pullPacketStart"
   },
   {
    "call to": "inet.queueing.server.InstantServer",
    "function": "inet::queueing::InstantServer::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.server.InstantServer",
    "function": "inet::queueing::InstantServer::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetFragmentFcsChecker": {
  "CALL": [
   {
    "call to": "inet.protocolelement.fragmentation.FragmentTagBasedDefragmenter",
    "function": "inet::FragmentTagBasedDefragmenter::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::EthernetFragmentFcs"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::EthernetFragmentFcs"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::FragmentTag"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetFragmentFcsInserter": {
  "CALL": [
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PreemptableStreamer",
    "function": "inet::PreemptableStreamer::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.PreemptableStreamer",
    "function": "inet::PreemptableStreamer::pullPacketStart",
    "info": "pullPacketStart"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFragmentFcs"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::FragmentTag"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetMacHeaderChecker": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   }
  ]
 },
 "inet.linklayer.ethernet.modular.EthernetMacHeaderInserter": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetMacHeaderInserter",
    "function": "inet::EthernetMacHeaderInserter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.common.PaddingInserter",
    "function": "inet::PaddingInserter::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::EthernetMacHeader"
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ]
 },
 "inet.linklayer.ieee80211.Ieee80211Interface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.llc.Ieee80211LlcLpd": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::UserPriorityInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ieee8022LlcSnapHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ieee8022LlcHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::ieee80211::LlcProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::Ieee802SapInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::Ieee802SapInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.aggregation.BasicMsduAggregationPolicy": {
  "PACKET": [
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.channelaccess.Dcaf": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::mediumStateChanged",
    "info": "medium FREE"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.channelaccess.Edcaf": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::mediumStateChanged",
    "info": "medium FREE"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::startContention",
    "info": "startContention"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::channelGranted",
    "info": "channelGranted"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.contention.Contention": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::channelAccessGranted",
    "info": "channelAccessGranted"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "channelGranted",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "startTx",
    "context": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::incrementCw",
    "info": "incrementCw"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::releaseChannel",
    "info": "releaseChannel"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::requestChannel",
    "info": "requestChannel"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::resetCw",
    "info": "resetCw"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::frameSequenceFinished",
    "info": "frameSequenceFinished"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::originatorProcessFailedFrame",
    "info": "originatorProcessFailedFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::originatorProcessReceivedFrame",
    "info": "originatorProcessReceivedFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::originatorProcessRtsProtectionFailed",
    "info": "originatorProcessRtsProtectionFailed"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::originatorProcessTransmittedFrame",
    "info": "originatorProcessTransmittedFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::processMgmtFrame",
    "info": "processMgmtFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::processUpperFrame",
    "info": "processUpperFrame(%s)"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::scheduleStartRxTimer",
    "info": "scheduleStartRxTimer"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::transmitControlResponseFrame",
    "info": "transmitControlResponseFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::transmitFrame",
    "info": "transmitFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::sendUpFrame",
    "info": "sendUpFrame(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.OriginatorQosMacDataService",
    "function": "inet::ieee80211::OriginatorQosMacDataService::extractFramesToTransmit",
    "info": "extractFramesToTransmit"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.TxopProcedure",
    "function": "inet::ieee80211::TxopProcedure::endTxop",
    "info": "endTxop"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.TxopProcedure",
    "function": "inet::ieee80211::TxopProcedure::startTxop",
    "info": "startTxop"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.queue.InProgressFrames",
    "function": "inet::ieee80211::InProgressFrames::clearDroppedFrames",
    "info": "clearDroppedFrames"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.queue.PendingQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.RecipientQosMacDataService",
    "function": "inet::ieee80211::RecipientQosMacDataService::controlFrameReceived",
    "info": "controlFrameReceived"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.RecipientQosMacDataService",
    "function": "inet::ieee80211::RecipientQosMacDataService::dataFrameReceived",
    "info": "dataFrameReceived"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.RecipientQosMacDataService",
    "function": "inet::ieee80211::RecipientQosMacDataService::managementFrameReceived",
    "info": "managementFrameReceived"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Tx",
    "function": "inet::ieee80211::Tx::transmitFrame",
    "info": "transmitFrame(\"%s\")"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211RtsFrame"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaRequest"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaResponse"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211BasicBlockAckReq"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MgmtHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211RtsFrame"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211BlockAckReq"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MgmtHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211RtsFrame"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "startRxTimeout",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::physicallayer::Ieee80211ModeReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::physicallayer::Ieee80211ModeInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::physicallayer::Ieee80211ModeReq"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.Ds": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::processUpperFrame",
    "info": "processUpperFrame(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::sendUp",
    "info": "sendUp(\"%s\")"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.fragmentation.BasicFragmentationPolicy": {
  "PACKET": [
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.Ieee80211Mac": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.blockack.OriginatorBlockAckAgreementPolicy",
    "function": "inet::ieee80211::OriginatorBlockAckAgreementPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Dcaf",
    "function": "inet::ieee80211::Dcaf::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.channelaccess.Edcaf",
    "function": "inet::ieee80211::Edcaf::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Dcf",
    "function": "inet::ieee80211::Dcf::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::corruptedFrameReceived",
    "info": "corruptedFrameReceived"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::processLowerFrame",
    "info": "processLowerFrame(%s)"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::processUpperFrame",
    "info": "processUpperFrame(%s)"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ds",
    "function": "inet::ieee80211::Ds::processDataFrame",
    "info": "processDataFrame"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::processLowerFrame",
    "info": "processLowerFrame(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::processUpperFrame",
    "info": "processUpperFrame(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.OriginatorAckPolicy",
    "function": "inet::ieee80211::OriginatorAckPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.OriginatorQosAckPolicy",
    "function": "inet::ieee80211::OriginatorQosAckPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.QosRtsPolicy",
    "function": "inet::ieee80211::QosRtsPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.RtsPolicy",
    "function": "inet::ieee80211::RtsPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.originator.TxopProcedure",
    "function": "inet::ieee80211::TxopProcedure::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.protectionmechanism.OriginatorProtectionMechanism",
    "function": "inet::ieee80211::OriginatorProtectionMechanism::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.protectionmechanism.SingleProtectionMechanism",
    "function": "inet::ieee80211::SingleProtectionMechanism::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.rateselection.QosRateSelection",
    "function": "inet::ieee80211::QosRateSelection::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.rateselection.RateSelection",
    "function": "inet::ieee80211::RateSelection::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.CtsPolicy",
    "function": "inet::ieee80211::CtsPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.QosCtsPolicy",
    "function": "inet::ieee80211::QosCtsPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.RecipientAckPolicy",
    "function": "inet::ieee80211::RecipientAckPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.recipient.RecipientQosAckPolicy",
    "function": "inet::ieee80211::RecipientQosAckPolicy::receiveSignal",
    "info": "modesetChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Rx",
    "function": "inet::ieee80211::Rx::lowerFrameReceived",
    "info": "lowerFrameReceived(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Rx",
    "function": "inet::ieee80211::Rx::receivedSignalPartChanged",
    "info": "receivedSignalPartChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Rx",
    "function": "inet::ieee80211::Rx::receptionStateChanged",
    "info": "receptionStateChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Rx",
    "function": "inet::ieee80211::Rx::transmissionStateChanged",
    "info": "transmissionStateChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Tx",
    "function": "inet::ieee80211::Tx::radioTransmissionFinished",
    "info": "radioTransmissionFinished"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadio",
    "function": "inet::physicallayer::Ieee80211Radio::setRadioMode",
    "info": "setRadioMode"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "mgmtIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "mgmtIn",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::Ieee80211ConfigureRadioCommand",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::ConfigureRadioCommand",
    "tags": []
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::Ieee80211ConfigureRadioCommand",
    "tags": []
   },
   {
    "gate": "mgmtOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::UserPriorityInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MgmtHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::UserPriorityInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::UserPriorityReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ieee80211SubtypeReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressReq"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.originator.OriginatorQosMacDataService": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.aggregation.BasicMsduAggregationPolicy",
    "function": "inet::ieee80211::BasicMsduAggregationPolicy::computeAggregateFrames",
    "info": "computeAggregateFrames"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.fragmentation.BasicFragmentationPolicy",
    "function": "inet::ieee80211::BasicFragmentationPolicy::computeFragmentSizes",
    "info": "computeFragmentSizes"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.queue.PendingQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.queue.PendingQueue",
    "function": "inet::queueing::PacketQueue::removePacket",
    "info": "removePacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MsduSubframeHeader"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SequenceChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SliceChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaRequest"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaResponse"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MgmtHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.queue.InProgressFrames": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.queue.PendingQueue": {
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::QueueingTimeTag"
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.recipient.RecipientQosMacDataService": {
  "PACKET": [
   {
    "packetAction": "hasAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SequenceChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SliceChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MsduSubframeHeader"
   },
   {
    "packetAction": "setFrontOffset",
    "chunkType": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.Rx": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::corruptedFrameReceived",
    "info": "corruptedFrameReceived"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::mediumStateChanged",
    "info": "medium BUSY"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.contention.Contention",
    "function": "inet::ieee80211::Contention::mediumStateChanged",
    "info": "medium FREE"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "NAV",
    "context": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.mac.Tx": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.coordinationfunction.Hcf",
    "function": "inet::ieee80211::Hcf::transmissionComplete",
    "info": "transmissionComplete"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::sendDownFrame",
    "info": "sendDownFrame(\"%s\")"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Rx",
    "function": "inet::ieee80211::Rx::frameTransmitted",
    "info": "frameTransmitted"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AckFrame"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaRequest"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211AddbaResponse"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211BasicBlockAck"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211BasicBlockAckReq"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211CtsFrame"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211DataHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MgmtHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ieee80211::Ieee80211RtsFrame"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   },
   {
    "packetAction": "removeAtBack",
    "chunkType": "inet::ieee80211::Ieee80211MacTrailer"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::ieee80211::Ieee80211MacHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "endIFS",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   }
  ]
 },
 "inet.linklayer.ieee80211.mgmt.Ieee80211AgentSta": {
  "INPUT": [
   {
    "gate": "mgmtIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AssociateConfirm",
    "tags": []
   },
   {
    "gate": "mgmtIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AuthenticateConfirm",
    "tags": []
   },
   {
    "gate": "mgmtIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_ScanConfirm",
    "tags": []
   }
  ],
  "OUTPUT": [
   {
    "gate": "mgmtOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AssociateRequest",
    "tags": []
   },
   {
    "gate": "mgmtOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AuthenticateRequest",
    "tags": []
   },
   {
    "gate": "mgmtOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_ScanRequest",
    "tags": []
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "1",
    "ctrl": "",
    "tags": [],
    "msgname": "startUp",
    "context": ""
   }
  ]
 },
 "inet.linklayer.ieee80211.mgmt.Ieee80211MgmtAp": {
  "INPUT": [
   {
    "gate": "macIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "macOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211AssociationResponseFrame"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211AuthenticationFrame"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211BeaconFrame"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211ProbeResponseFrame"
   },
   {
    "packetAction": "peekAt",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211AuthenticationFrame"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211ProbeRequestFrame"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "beaconTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::Ieee80211SubtypeReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   }
  ]
 },
 "inet.linklayer.ieee80211.mgmt.Ieee80211MgmtSta": {
  "INPUT": [
   {
    "gate": "agentIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AssociateRequest",
    "tags": []
   },
   {
    "gate": "agentIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AuthenticateRequest",
    "tags": []
   },
   {
    "gate": "agentIn",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_ScanRequest",
    "tags": []
   },
   {
    "gate": "macIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "agentOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AssociateConfirm",
    "tags": []
   },
   {
    "gate": "agentOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_AuthenticateConfirm",
    "tags": []
   },
   {
    "gate": "agentOut",
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::ieee80211::Ieee80211Prim_ScanConfirm",
    "tags": []
   },
   {
    "gate": "macOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "macOut",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::Ieee80211ConfigureRadioCommand",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211AssociationRequestFrame"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211AuthenticationFrame"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ieee80211::Ieee80211ProbeRequestFrame"
   },
   {
    "packetAction": "peekAt",
    "chunkType": "inet::ieee80211::Ieee80211DataOrMgmtHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211AssociationResponseFrame"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211AuthenticationFrame"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211BeaconFrame"
   },
   {
    "packetAction": "peekData",
    "chunkType": "inet::ieee80211::Ieee80211ProbeResponseFrame"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "3",
    "ctrl": "",
    "tags": [],
    "msgname": "sendProbe",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "4",
    "ctrl": "",
    "tags": [],
    "msgname": "minChannelTime",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "5",
    "ctrl": "",
    "tags": [],
    "msgname": "maxChannelTime",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::Ieee80211SubtypeReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SignalPowerInd"
   }
  ]
 },
 "inet.linklayer.ieee80211.portal.Ieee80211Portal": {
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "eraseAtFront",
    "chunkType": ""
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EthernetFcs"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::EthernetMacHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ieee8022LlcHeader"
   },
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressInd"
   }
  ]
 },
 "inet.linklayer.ieee802154.Ieee802154NarrowbandInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ieee802154.Ieee802154NarrowbandMac": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadio",
    "function": "inet::physicallayer::FlatRadioBase::setRadioMode",
    "info": "setRadioMode"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ieee802154MacHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ieee802154MacHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ieee802154MacHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "timer-backoff",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "timer-cca",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "timer-rxAck",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "timer-sifs",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ieee8021d.relay.Ieee8021dRelay": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyProtocol",
    "info": "handleRegisterAnyProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterAnyService",
    "info": "handleRegisterAnyService"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::getInterfaceIdForAddress",
    "info": "getInterfaceIdForAddress"
   },
   {
    "call to": "inet.linklayer.ethernet.common.MacAddressTable",
    "function": "inet::MacAddressTable::updateTableWithAddress",
    "info": "updateTableWithAddress"
   }
  ],
  "INPUT": [
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "lowerLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::UserPriorityInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::VlanInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::MacAddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ieee8021dInterfaceData"
   }
  ]
 },
 "inet.linklayer.ieee8021q.Ieee8021qTagEpdHeaderChecker": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   }
  ]
 },
 "inet.linklayer.ieee8021q.Ieee8021qTagEpdHeaderInserter": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ]
 },
 "inet.linklayer.ieee8021r.Ieee8021rTagEpdHeaderChecker": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   }
  ]
 },
 "inet.linklayer.ieee8021r.Ieee8021rTagEpdHeaderInserter": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ]
 },
 "inet.linklayer.ieee8022.Ieee8022Llc": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ]
 },
 "inet.linklayer.loopback.Loopback": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ]
 },
 "inet.linklayer.loopback.LoopbackInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.linklayer.ppp.Ppp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "phys$i",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "phys$o",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::PppTrailer"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::PppHeader"
   },
   {
    "packetAction": "peekAtBack",
    "chunkType": "inet::PppTrailer"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::PppHeader"
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::PppTrailer"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::PppHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "pppEndTxEvent",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.linklayer.ppp.PppInterface": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterInterface",
    "info": "handleRegisterInterface"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   }
  ],
  "TAG": [
   {
    "tagAction": "clearTags",
    "tagType": ""
   }
  ]
 },
 "inet.mobility.single.AttachedMobility": {
  "CALL": [
   {
    "call to": "inet.mobility.single.SuperpositioningMobility",
    "function": "inet::SuperpositioningMobility::receiveSignal",
    "info": "mobilityStateChanged"
   }
  ]
 },
 "inet.mobility.single.BonnMotionMobility": {
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.mobility.single.CircleMobility": {
  "CALL": [
   {
    "call to": "inet.mobility.single.AttachedMobility",
    "function": "inet::AttachedMobility::receiveSignal",
    "info": "mobilityStateChanged"
   },
   {
    "call to": "inet.mobility.single.SuperpositioningMobility",
    "function": "inet::SuperpositioningMobility::receiveSignal",
    "info": "mobilityStateChanged"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.mobility.single.GaussMarkovMobility": {
  "CALL": [
   {
    "call to": "inet.mobility.single.SuperpositioningMobility",
    "function": "inet::SuperpositioningMobility::receiveSignal",
    "info": "mobilityStateChanged"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.mobility.single.LinearMobility": {
  "CALL": [
   {
    "call to": "inet.mobility.single.AttachedMobility",
    "function": "inet::AttachedMobility::receiveSignal",
    "info": "mobilityStateChanged"
   },
   {
    "call to": "inet.mobility.single.SuperpositioningMobility",
    "function": "inet::SuperpositioningMobility::receiveSignal",
    "info": "mobilityStateChanged"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.mobility.single.MassMobility": {
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.mobility.single.TurtleMobility": {
  "CALL": [
   {
    "call to": "inet.mobility.single.AttachedMobility",
    "function": "inet::AttachedMobility::receiveSignal",
    "info": "mobilityStateChanged"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "move",
    "context": ""
   }
  ]
 },
 "inet.networklayer.arp.ipv4.Arp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::receiveSignal",
    "info": "arpResolutionCompleted"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::getInterfaceForDestAddr",
    "info": "getInterfaceForDestAddr(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::isLocalAddress",
    "info": "isLocalAddress(%u.%u.%u.%u)"
   }
  ],
  "INPUT": [
   {
    "gate": "ifIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ifIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "ifIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "ifOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ifOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::ArpPacket"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::ArpPacket"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.arp.ipv4.GlobalArp": {
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::NextHopInterfaceData"
   }
  ]
 },
 "inet.networklayer.common.InterfaceTable": {
  "CALL": [
   {
    "call to": "inet.networklayer.configurator.ipv4.Ipv4NodeConfigurator",
    "function": "inet::Ipv4NodeConfigurator::receiveSignal",
    "info": "interfaceStateChanged"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::receiveSignal",
    "info": "interfaceConfigChanged"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::receiveSignal",
    "info": "interfaceIpv4ConfigChanged"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::receiveSignal",
    "info": "interfaceStateChanged"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::receiveSignal",
    "info": "interfaceConfigChanged"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::receiveSignal",
    "info": "interfaceIpv6ConfigChanged"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::receiveSignal",
    "info": "interfaceStateChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv4Pdm",
    "function": "inet::eigrp::EigrpIpv4Pdm::receiveSignal",
    "info": "interfaceConfigChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv4Pdm",
    "function": "inet::eigrp::EigrpIpv4Pdm::receiveSignal",
    "info": "interfaceStateChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv6Pdm",
    "function": "inet::eigrp::EigrpIpv6Pdm::receiveSignal",
    "info": "interfaceConfigChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv6Pdm",
    "function": "inet::eigrp::EigrpIpv6Pdm::receiveSignal",
    "info": "interfaceStateChanged"
   }
  ]
 },
 "inet.networklayer.configurator.ipv4.Ipv4NetworkConfigurator": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByNodeInputGateId",
    "info": "findInterfaceByNodeInputGateId"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByNodeOutputGateId",
    "info": "findInterfaceByNodeOutputGateId"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::UnitDiskPhyHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::UnitDiskPhyHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalPowerInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalTimeInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalBitrateReq"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTagForUpdate",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.configurator.ipv4.Ipv4NodeConfigurator": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::addRoute",
    "info": "addRoute(...)"
   }
  ],
  "TAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.configurator.ipv6.Ipv6FlatNetworkConfigurator": {
  "TAG": [
   {
    "tagAction": "findTagForUpdate",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.networklayer.diffserv.BehaviorAggregateClassifier": {
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.networklayer.diffserv.DiffservQueue": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.filter.RedDropper",
    "function": "inet::queueing::RedDropper::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::pullPacket",
    "info": "pullPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   },
   {
    "packetAction": "setFrontOffset",
    "chunkType": ""
   }
  ],
  "PULL_IN": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.networklayer.diffserv.DscpMarker": {
  "CALL": [
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "trimFront",
    "chunkType": ""
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.networklayer.diffserv.MultiFieldClassifier": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.DscpMarker",
    "function": "inet::DscpMarker::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::UdpHeader"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   },
   {
    "packetAction": "setFrontOffset",
    "chunkType": ""
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.diffserv.SingleRateThreeColorMeter": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByNodeInputGateId",
    "info": "findInterfaceByNodeInputGateId"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "greenOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "redOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "yellowOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.networklayer.diffserv.TokenBucketMeter": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByNodeInputGateId",
    "info": "findInterfaceByNodeInputGateId"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "greenOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.networklayer.icmpv6.Icmpv6": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ]
 },
 "inet.networklayer.icmpv6.Ipv6NeighbourDiscovery": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.networklayer.icmpv6.Ipv6NeighbourDiscovery",
    "function": "inet::Ipv6NeighbourDiscovery::createAndSendNsPacket",
    "info": "createAndSendNsPacket"
   },
   {
    "call to": "inet.networklayer.icmpv6.Ipv6NeighbourDiscovery",
    "function": "inet::Ipv6NeighbourDiscovery::initiateDad",
    "info": "initiateDad"
   }
  ],
  "INPUT": [
   {
    "gate": "ipv6In",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "inet::Ipv6NdControlInfo",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ipv6In",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "ipv6Out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "inet::Ipv6NdControlInfo",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ipv6Out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv6NeighbourAdvertisement"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv6NeighbourSolicitation"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv6RouterAdvertisement"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv6RouterSolicitation"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Icmpv6Header"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ipv6Header"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "assignLinkLocalAddr",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "2",
    "ctrl": "",
    "tags": [],
    "msgname": "sendSolicitedRA",
    "context": "filled"
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "3",
    "ctrl": "",
    "tags": [],
    "msgname": "initiateRTRDIS",
    "context": "filled"
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "4",
    "ctrl": "",
    "tags": [],
    "msgname": "dadTimeout",
    "context": "filled"
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "5",
    "ctrl": "",
    "tags": [],
    "msgname": "processRDTimeout",
    "context": "filled"
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "6",
    "ctrl": "",
    "tags": [],
    "msgname": "NUDTimeout",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::HopLimitReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::HopLimitInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.networklayer.ipv4.Icmp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   }
  ],
  "INPUT": [
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SequenceChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::IcmpEchoReply"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::IcmpHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::IcmpHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::IcmpHeader"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::IcmpEchoRequest"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   }
  ]
 },
 "inet.networklayer.ipv4.Igmpv2": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.ipv4.Ipv4": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.networklayer.arp.ipv4.Arp",
    "function": "inet::Arp::resolveL3Address",
    "info": "resolveMACAddress(%s,%s)"
   },
   {
    "call to": "inet.networklayer.arp.ipv4.GlobalArp",
    "function": "inet::GlobalArp::resolveL3Address",
    "info": "resolveL3Address"
   },
   {
    "call to": "inet.networklayer.ipv4.Icmp",
    "function": "inet::Icmp::sendErrorMessage",
    "info": "sendErrorMessage(datagram, type=%d, code=%d)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::findBestMatchingRoute",
    "info": "findBestMatchingRoute(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::findInterfaceByLocalBroadcastAddress",
    "info": "findInterfaceByLocalBroadcastAddress(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::getInterfaceByAddress",
    "info": "getInterfaceByAddress(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::isLocalAddress",
    "info": "isLocalAddress(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::isLocalBroadcastAddress",
    "info": "isLocalBroadcastAddress(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.transportlayer.tcp_common.TcpCrcInsertionHook",
    "function": "inet::tcp::TcpCrcInsertionHook::datagramPostRoutingHook",
    "info": "datagramPostRoutingHook"
   },
   {
    "call to": "inet.transportlayer.udp.UdpCrcInsertionHook",
    "function": "inet::UdpCrcInsertionHook::datagramPostRoutingHook",
    "info": "datagramPostRoutingHook"
   }
  ],
  "INPUT": [
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::MulticastReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::EcnReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::MulticastReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::Ipv4SocketBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::FragmentTag",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::TosInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::TosInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SocketInd",
     "inet::TosInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SequenceChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "removeAll",
    "chunkType": "inet::Chunk"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   },
   {
    "packetAction": "trim",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DscpInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::EcnInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::HopLimitInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::NextHopAddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TosInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::EcnInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::MulticastReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::NextHopAddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DscpReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::EcnReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::FragmentationReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::HopLimitReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::Ipv4OptionsReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::TosReq"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::NextHopAddressReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.ipv4.Ipv4RoutingTable": {
  "CALL": [
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::findBestMatchingRoute",
    "info": "findBestMatchingRoute(%u.%u.%u.%u)"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv4Pdm",
    "function": "inet::eigrp::EigrpIpv4Pdm::receiveSignal",
    "info": "routeDeleted"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv6Pdm",
    "function": "inet::eigrp::EigrpIpv6Pdm::receiveSignal",
    "info": "routeDeleted"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.networklayer.ipv6.Ipv6": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.icmpv6.Ipv6NeighbourDiscovery",
    "function": "inet::Ipv6NeighbourDiscovery::resolveNeighbour",
    "info": "resolveNeighbor(%s,if=%d)"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::doLongestPrefixMatch",
    "info": "doLongestPrefixMatch(%s)"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::getInterfaceByAddress",
    "info": "getInterfaceByAddress(%s)=?"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::isLocalAddress",
    "info": "isLocalAddress(%s) y/n"
   },
   {
    "call to": "inet.networklayer.ipv6.Ipv6RoutingTable",
    "function": "inet::Ipv6RoutingTable::lookupDestCache",
    "info": "lookupDestCache(%s)"
   }
  ],
  "INPUT": [
   {
    "gate": "ndIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "inet::Ipv6NdControlInfo",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ndIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "transportIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "ndOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "inet::Ipv6NdControlInfo",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "ndOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "queueOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "transportOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv6Header"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Icmpv6Header"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::Ipv6Header"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ipv6Header"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::Ipv6Header"
   },
   {
    "packetAction": "trim",
    "chunkType": ""
   },
   {
    "packetAction": "trimFront",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DscpInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::EcnInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::HopLimitInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::MacAddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TosInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DscpReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::EcnReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::HopLimitReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::Ipv6ExtHeaderReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::TosReq"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::L3AddressReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.networklayer.ipv6.Ipv6RoutingTable": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv4Pdm",
    "function": "inet::eigrp::EigrpIpv4Pdm::receiveSignal",
    "info": "routeDeleted"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv6Pdm",
    "function": "inet::eigrp::EigrpIpv6Pdm::receiveSignal",
    "info": "routeDeleted"
   }
  ],
  "TAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.node.ethernet.EthernetHub": {
  "INPUT": [
   {
    "gate": "ethg$i[]",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "OUTPUT": [
   {
    "gate": "ethg$o[]",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ]
 },
 "inet.physicallayer.wired.common.WireJunction": {
  "INPUT": [
   {
    "gate": "port$i[]",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "OUTPUT": [
   {
    "gate": "port$o[]",
    "msg": "inet::physicallayer::EthernetSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ]
 },
 "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderChecker": {
  "CALL": [
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::physicallayer::EthernetFragmentPhyHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::EthernetFragmentPhyHeader"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderInserter": {
  "CALL": [
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacketProgress",
    "info": "pushPacketProgress"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::EthernetFragmentPhyHeader"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::FragmentTag"
   }
  ]
 },
 "inet.physicallayer.wired.ethernet.EthernetPhyHeaderChecker": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSource",
    "function": "inet::EthernetCutthroughSource::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSource",
    "function": "inet::EthernetCutthroughSource::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSink",
    "function": "inet::EthernetCutthroughSink::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSink",
    "function": "inet::EthernetCutthroughSink::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::pushPacketProgress",
    "info": "pushPacketProgress"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacketProgress",
    "info": "pushPacketProgress"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeader"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel": {
  "CALL": [
   {
    "call to": "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel",
    "function": "inet::physicallayer::ApskErrorModel::computeBitErrorRate",
    "info": "computeBitErrorRate"
   }
  ]
 },
 "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer": {
  "CALL": [
   {
    "call to": "inet.power.storage.IdealEpEnergyStorage",
    "function": "inet::power::IdealEpEnergyStorage::addEnergyConsumer",
    "info": "addEnergyConsumer"
   },
   {
    "call to": "inet.power.storage.IdealEpEnergyStorage",
    "function": "inet::power::IdealEpEnergyStorage::receiveSignal",
    "info": "powerConsumptionChanged"
   }
  ]
 },
 "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadio": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::receiveSignal",
    "info": "radioModeChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::receiveSignal",
    "info": "receivedSignalPartChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::receiveSignal",
    "info": "receptionStateChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mac.Ieee80211Mac",
    "function": "inet::ieee80211::Ieee80211Mac::receiveSignal",
    "info": "transmissionStateChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mgmt.Ieee80211MgmtAp",
    "function": "inet::ieee80211::Ieee80211MgmtAp::receiveSignal",
    "info": "radioChannelChanged"
   },
   {
    "call to": "inet.linklayer.ieee80211.mgmt.Ieee80211MgmtSta",
    "function": "inet::ieee80211::Ieee80211MgmtSta::receiveSignal",
    "info": "receptionStateChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.errormodel.Ieee80211NistErrorModel",
    "function": "inet::physicallayer::Ieee80211NistErrorModel::computePacketErrorRate",
    "info": "computePacketErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadio",
    "function": "inet::physicallayer::Ieee80211Radio::setRadioMode",
    "info": "setRadioMode"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addRadio",
    "info": "addRadio"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::listenOnMedium",
    "info": "listenOnMedium"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::receivePacket",
    "info": "receivePacket"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::removeRadio",
    "info": "removeRadio"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::transmitPacket",
    "info": "transmitPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "radioIn",
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::UserPriorityReq",
     "inet::ieee80211::LlcProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::Ieee80211SubtypeReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::MacAddressInd",
     "inet::PacketProtocolTag",
     "inet::physicallayer::Ieee80211ModeReq"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::ConfigureRadioCommand",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Request",
    "kind": "1",
    "ctrl": "inet::physicallayer::Ieee80211ConfigureRadioCommand",
    "tags": []
   }
  ],
  "OUTPUT": [
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   }
  ],
  "OUTPUTDIRECT": [
   {
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BitCountChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::Ieee80211HtPhyHeader"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::physicallayer::Ieee80211OfdmPhyHeader"
   },
   {
    "packetAction": "popAtBack",
    "chunkType": "inet::Chunk"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::Ieee80211HtPhyHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::physicallayer::Ieee80211OfdmPhyHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::physicallayer::WirelessSignal",
    "tags": [],
    "msgname": "receptionTimer",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "transmissionTimer",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::physicallayer::Ieee80211ModeReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalBitrateReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::physicallayer::Ieee80211ModeInd"
   }
  ]
 },
 "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium": {
  "CALL": [
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.errormodel.Ieee80211NistErrorModel",
    "function": "inet::physicallayer::Ieee80211NistErrorModel::computeBitErrorRate",
    "info": "computeBitErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.errormodel.Ieee80211NistErrorModel",
    "function": "inet::physicallayer::Ieee80211NistErrorModel::computePacketErrorRate",
    "info": "computePacketErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.errormodel.Ieee80211NistErrorModel",
    "function": "inet::physicallayer::Ieee80211NistErrorModel::computeSymbolErrorRate",
    "info": "computeSymbolErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee80211.packetlevel.Ieee80211ScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addTransmission",
    "info": "addTransmission"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::physicallayer::Ieee80211HtPhyHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::physicallayer::Ieee80211OfdmPhyHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "removeNonInterferingTransmissions",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::physicallayer::Ieee80211ChannelInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::physicallayer::Ieee80211ModeInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalPowerInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalTimeInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::physicallayer::Ieee80211ChannelReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::physicallayer::Ieee80211ModeReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalBitrateReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalPowerReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadio": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee802154.Ieee802154NarrowbandMac",
    "function": "inet::Ieee802154Mac::receiveSignal",
    "info": "transmissionStateChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel",
    "function": "inet::physicallayer::ApskErrorModel::computePacketErrorRate",
    "info": "computePacketErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer",
    "function": "inet::physicallayer::StateBasedEpEnergyConsumer::receiveSignal",
    "info": "radioModeChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer",
    "function": "inet::physicallayer::StateBasedEpEnergyConsumer::receiveSignal",
    "info": "receivedSignalPartChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer",
    "function": "inet::physicallayer::StateBasedEpEnergyConsumer::receiveSignal",
    "info": "receptionStateChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer",
    "function": "inet::physicallayer::StateBasedEpEnergyConsumer::receiveSignal",
    "info": "transmissionStateChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.common.energyconsumer.SensorStateBasedEpEnergyConsumer",
    "function": "inet::physicallayer::StateBasedEpEnergyConsumer::receiveSignal",
    "info": "transmittedSignalPartChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addRadio",
    "info": "addRadio"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::listenOnMedium",
    "info": "listenOnMedium"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::receivePacket",
    "info": "receivePacket"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::removeRadio",
    "info": "removeRadio"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::transmitPacket",
    "info": "transmitPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "radioIn",
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   }
  ],
  "OUTPUTDIRECT": [
   {
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::physicallayer::WirelessSignal",
    "tags": [],
    "msgname": "receptionTimer",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "transmissionTimer",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium": {
  "CALL": [
   {
    "call to": "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel",
    "function": "inet::physicallayer::ApskErrorModel::computeBitErrorRate",
    "info": "computeBitErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel",
    "function": "inet::physicallayer::ApskErrorModel::computePacketErrorRate",
    "info": "computePacketErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.apsk.packetlevel.errormodel.ApskErrorModel",
    "function": "inet::physicallayer::ApskErrorModel::computeSymbolErrorRate",
    "info": "computeSymbolErrorRate"
   },
   {
    "call to": "inet.physicallayer.wireless.ieee802154.packetlevel.Ieee802154NarrowbandScalarRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addTransmission",
    "info": "addTransmission"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "removeNonInterferingTransmissions",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalPowerInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalTimeInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalBitrateReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalPowerReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wireless.unitdisk.UnitDiskRadio": {
  "CALL": [
   {
    "call to": "inet.linklayer.acking.AckingMac",
    "function": "inet::AckingMac::receiveSignal",
    "info": "transmissionStateChanged"
   },
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addRadio",
    "info": "addRadio"
   },
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium",
    "function": "inet::physicallayer::RadioMedium::listenOnMedium",
    "info": "listenOnMedium"
   },
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium",
    "function": "inet::physicallayer::RadioMedium::receivePacket",
    "info": "receivePacket"
   },
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium",
    "function": "inet::physicallayer::RadioMedium::transmitPacket",
    "info": "transmitPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "radioIn",
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "upperLayerIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "upperLayerOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::ErrorRateInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   }
  ],
  "OUTPUTDIRECT": [
   {
    "msg": "inet::physicallayer::WirelessSignal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::UnitDiskPhyHeader"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::UnitDiskPhyHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "inet::physicallayer::WirelessSignal",
    "tags": [],
    "msgname": "receptionTimer",
    "context": ""
   },
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "transmissionTimer",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium": {
  "CALL": [
   {
    "call to": "inet.physicallayer.wireless.unitdisk.UnitDiskRadioMedium",
    "function": "inet::physicallayer::RadioMedium::addTransmission",
    "info": "addTransmission"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::UnitDiskPhyHeader"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "removeNonInterferingTransmissions",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::ErrorRateInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalPowerInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SignalTimeInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SnirInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::SignalBitrateReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.protocolelement.common.InterpacketGapInserter": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacketProgress",
    "info": "pushPacketProgress"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "IfgTimer",
    "context": ""
   }
  ]
 },
 "inet.protocolelement.common.PacketEmitter": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughSink",
    "function": "inet::EthernetCutthroughSink::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsChecker",
    "function": "inet::EthernetFcsChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::pullPacketStart",
    "info": "pullPacketStart"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFragmentFcsChecker",
    "function": "inet::EthernetFragmentFcsChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFragmentFcsInserter",
    "function": "inet::EthernetFragmentFcsInserter::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFragmentFcsInserter",
    "function": "inet::EthernetFragmentFcsInserter::pullPacketStart",
    "info": "pullPacketStart"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderChecker",
    "function": "inet::physicallayer::EthernetPhyHeaderChecker::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderChecker",
    "function": "inet::physicallayer::EthernetPhyHeaderChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderChecker",
    "function": "inet::physicallayer::EthernetPhyHeaderChecker::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.transceiver.PacketTransmitter",
    "function": "inet::PacketTransmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamingTransmitter",
    "function": "inet::StreamingTransmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::pushPacketProgress",
    "info": "pushPacketProgress"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   }
  ]
 },
 "inet.protocolelement.common.PacketStreamer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ]
 },
 "inet.protocolelement.common.PaddingInserter": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.protocolelement.common.PreemptableStreamer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFragmentFcsInserter",
    "function": "inet::EthernetFragmentFcsInserter::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "removeAtBack",
    "chunkType": "inet::Chunk"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "findTagForUpdate",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.protocolelement.fragmentation.FragmentTagBasedDefragmenter": {
  "CALL": [
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::SequenceChunk"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::FragmentTag"
   }
  ]
 },
 "inet.protocolelement.measurement.OmittedMeasurementLayer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.protocolelement.trafficconditioner.OmittedTrafficConditionerLayer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.protocolelement.transceiver.DestreamingReceiver": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceInd"
   }
  ]
 },
 "inet.protocolelement.transceiver.PacketReceiver": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceInd"
   }
  ]
 },
 "inet.protocolelement.transceiver.PacketTransmitter": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PropagationTimeTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::TransmissionTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "TxEndTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.protocolelement.transceiver.StreamingTransmitter": {
  "CALL": [
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PropagationTimeTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::TransmissionTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "TxEndTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.protocolelement.transceiver.StreamThroughReceiver": {
  "CALL": [
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacketStart",
    "info": "pushPacketStart"
   }
  ],
  "INPUT": [
   {
    "gate": "in",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::InterfaceInd"
   }
  ]
 },
 "inet.protocolelement.transceiver.StreamThroughTransmitter": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::handlePushPacketProcessed",
    "info": "handlePushPacketProcessed"
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::physicallayer::Signal",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "eraseAtBack",
    "chunkType": ""
   },
   {
    "packetAction": "peekAll",
    "chunkType": ""
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PropagationTimeTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::TransmissionTimeTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "TxEndTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "clearTags",
    "tagType": ""
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.queueing.classifier.PacketClassifier": {
  "CALL": [
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderChecker",
    "function": "inet::physicallayer::EthernetFragmentPhyHeaderChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetFragmentPhyHeaderInserter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetFragmentPhyHeaderInserter::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderChecker",
    "function": "inet::physicallayer::EthernetPhyHeaderChecker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.PriorityQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.server.PreemptingServer",
    "function": "inet::queueing::PreemptingServer::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::physicallayer::EthernetPhyHeaderBase"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::FragmentTag"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::VlanReq"
   }
  ]
 },
 "inet.queueing.common.OmittedPacketFlow": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.queueing.common.PacketMultiplexer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.networklayer.diffserv.DscpMarker",
    "function": "inet::DscpMarker::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetFragmentPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetFragmentPhyHeaderInserter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.physicallayer.wired.ethernet.EthernetPhyHeaderInserter",
    "function": "inet::physicallayer::EthernetPhyHeaderInserter::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.InterpacketGapInserter",
    "function": "inet::InterpacketGapInserter::pushPacketProgress",
    "info": "pushPacketProgress"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.filter.RedDropper",
    "function": "inet::queueing::RedDropper::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.queue.PacketQueue",
    "function": "inet::queueing::PacketQueue::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.sink.PassivePacketSink",
    "function": "inet::queueing::PassivePacketSink::pushPacket",
    "info": "pushPacket"
   }
  ],
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "setBackOffset",
    "chunkType": ""
   },
   {
    "packetAction": "setFrontOffset",
    "chunkType": ""
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::FragmentTag",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::InterfaceInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.queueing.filter.RedDropper": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.BehaviorAggregateClassifier",
    "function": "inet::BehaviorAggregateClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.queueing.marker.PacketTagger": {
  "OUTPUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::VlanReq"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::VlanReq"
   }
  ]
 },
 "inet.queueing.queue.DropTailQueue": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.common.EthernetFrameClassifier",
    "function": "inet::EthernetFrameClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetDropped"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.networklayer.diffserv.BehaviorAggregateClassifier",
    "function": "inet::BehaviorAggregateClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.protocolelement.common.PacketStreamer",
    "function": "inet::PacketStreamer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.protocolelement.common.PreemptableStreamer",
    "function": "inet::PreemptableStreamer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.queue.PriorityQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetDropped"
   },
   {
    "call to": "inet.queueing.queue.PriorityQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.queueing.queue.PriorityQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.server.InstantServer",
    "function": "inet::queueing::InstantServer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::ErrorRateInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::QueueingTimeTag"
   }
  ]
 },
 "inet.queueing.queue.OmittedPacketQueue": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.queueing.queue.PacketQueue": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPushed"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.scheduler.WrrScheduler",
    "function": "inet::queueing::WrrScheduler::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.server.InstantServer",
    "function": "inet::queueing::InstantServer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::PacketEventTag"
   },
   {
    "tagAction": "mapAllTagsForUpdate",
    "tagType": "inet::QueueingTimeTag"
   }
  ]
 },
 "inet.queueing.scheduler.PriorityScheduler": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.common.EthernetQosQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.protocolelement.common.PacketEmitter",
    "function": "inet::PacketEmitter::pullPacketStart",
    "info": "pullPacketStart"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.queue.PriorityQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.queueing.scheduler.WrrScheduler",
    "function": "inet::queueing::WrrScheduler::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.server.InstantServer",
    "function": "inet::queueing::InstantServer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   },
   {
    "call to": "inet.queueing.server.PreemptingServer",
    "function": "inet::queueing::PreemptingServer::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::EcnInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.queueing.scheduler.WrrScheduler": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.DiffservQueue",
    "function": "inet::queueing::CompoundPacketQueueBase::receiveSignal",
    "info": "packetPulled"
   },
   {
    "call to": "inet.queueing.queue.PacketQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::handleCanPullPacketChanged",
    "info": "handleCanPullPacketChanged"
   }
  ],
  "PULLED_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PULL_IN": [
   {
    "gate": "in[]",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.queueing.server.InstantServer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetFcsInserter",
    "function": "inet::EthernetFcsInserter::pushPacket",
    "info": "pushPacket"
   },
   {
    "call to": "inet.queueing.queue.DropTailQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.queue.PacketQueue",
    "function": "inet::queueing::PacketQueue::pullPacket",
    "info": "pullPacket"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::pullPacket",
    "info": "pullPacket"
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ]
 },
 "inet.queueing.server.OmittedPacketServer": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.queueing.server.PreemptingServer": {
  "CALL": [
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::pushPacketEnd",
    "info": "pushPacketEnd"
   },
   {
    "call to": "inet.queueing.classifier.PacketClassifier",
    "function": "inet::queueing::PacketClassifier::pushPacketStart",
    "info": "pushPacketStart"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::pullPacketEnd",
    "info": "pullPacketEnd"
   },
   {
    "call to": "inet.queueing.scheduler.PriorityScheduler",
    "function": "inet::queueing::PriorityScheduler::pullPacketStart",
    "info": "pullPacketStart"
   }
  ],
  "PULL_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::FragmentTag",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolInd",
     "inet::InterfaceReq",
     "inet::MacAddressReq",
     "inet::MulticastReq",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "Timer",
    "context": ""
   }
  ]
 },
 "inet.queueing.shaper.OmittedTrafficConditioner": {
  "CALL": [
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.queueing.sink.PassivePacketSink": {
  "CALL": [
   {
    "call to": "inet.networklayer.diffserv.BehaviorAggregateClassifier",
    "function": "inet::BehaviorAggregateClassifier::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   },
   {
    "call to": "inet.queueing.common.PacketMultiplexer",
    "function": "inet::queueing::PacketMultiplexer::handleCanPushPacketChanged",
    "info": "handleCanPushPacketChanged"
   }
  ],
  "PUSHED_IN": [
   {
    "gate": "in",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::InterfaceInd",
     "inet::InterfaceReq",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "ConsumptionTimer",
    "context": ""
   }
  ]
 },
 "inet.queueing.source.ActivePacketSource": {
  "CALL": [
   {
    "call to": "inet.queueing.marker.PacketTagger",
    "function": "inet::queueing::PacketTagger::pushPacket",
    "info": "pushPacket"
   }
  ],
  "PUSH_OUT": [
   {
    "gate": "out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag"
    ]
   }
  ],
  "RTAG": [
   {
    "tagAction": "addTag",
    "tagType": "inet::CreationTimeTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::IdentityTag"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "inet::ClockEvent",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "ProductionTimer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DirectionTag"
   }
  ]
 },
 "inet.routing.eigrp.EigrpRtp6": {
  "INPUT": [
   {
    "gate": "pdmIn",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "pdmIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "pdmOut",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpMessage"
   }
  ],
  "STAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   }
  ]
 },
 "inet.routing.eigrp.EigrpRtp": {
  "INPUT": [
   {
    "gate": "pdmIn",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "pdmIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "pdmOut",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpMessage"
   }
  ],
  "STAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   }
  ]
 },
 "inet.routing.eigrp.EigrpSplitter": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   }
  ],
  "INPUT": [
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "splitter6In",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "splitterIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   },
   {
    "gate": "splitter6Out",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "splitterOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "STAG": [
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.routing.eigrp.pdms.EigrpIpv4Pdm": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.networklayer.ipv4.Igmpv2",
    "function": "inet::Igmpv2::receiveSignal",
    "info": "ipv4MulticastGroupJoined"
   },
   {
    "call to": "inet.networklayer.ipv4.Igmpv2",
    "function": "inet::Igmpv2::receiveSignal",
    "info": "ipv4MulticastGroupLeft"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::addRoute",
    "info": "addRoute(...)"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4RoutingTable",
    "function": "inet::Ipv4RoutingTable::removeRoute",
    "info": "removeRoute(...)"
   }
  ],
  "INPUT": [
   {
    "gate": "rtpIn",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "splitterIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "rtpOut",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "rtpOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "splitterOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv4Ack"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv4Hello"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv4Query"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv4Reply"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv4Update"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv4Ack"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv4Hello"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv4Query"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv4Reply"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv4Update"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpMessage"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "EigrpTimer",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::HopLimitReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv4InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.routing.eigrp.pdms.EigrpIpv6Pdm": {
  "CALL": [
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::findInterfaceByName",
    "info": "findInterfaceByName"
   },
   {
    "call to": "inet.networklayer.common.InterfaceTable",
    "function": "inet::InterfaceTable::interfaceChanged",
    "info": "interfaceChanged"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv4Pdm",
    "function": "inet::eigrp::EigrpIpv4Pdm::receiveSignal",
    "info": "routeDeleted"
   },
   {
    "call to": "inet.routing.eigrp.pdms.EigrpIpv6Pdm",
    "function": "inet::eigrp::EigrpIpv6Pdm::receiveSignal",
    "info": "routeDeleted"
   }
  ],
  "INPUT": [
   {
    "gate": "rtpIn",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "splitterIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "rtpOut",
    "msg": "inet::EigrpMsgReq",
    "kind": "0",
    "ctrl": "",
    "tags": []
   },
   {
    "gate": "rtpOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "splitterOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::HopLimitReq",
     "inet::InterfaceReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv6Ack"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv6Hello"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv6Query"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv6Reply"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::EigrpIpv6Update"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv6Ack"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv6Hello"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv6Query"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv6Reply"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpIpv6Update"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::EigrpMessage"
   }
  ],
  "SCHEDULE": [
   {
    "msg": "EigrpTimer",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::HopLimitReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ],
  "TAG": [
   {
    "tagAction": "findTagForUpdate",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv6InterfaceData"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::Ipv6InterfaceData"
   }
  ]
 },
 "inet.showcases.ethernet.cutthrough.EthernetCutthroughShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.DestreamingReceiver",
    "function": "inet::DestreamingReceiver::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamingTransmitter",
    "function": "inet::StreamingTransmitter::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughReceiver",
    "function": "inet::StreamThroughReceiver::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.ethernet.preemption.EthernetPreemptionShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.DestreamingReceiver",
    "function": "inet::DestreamingReceiver::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.general.diffserv.DiffservNetwork": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.mobility.basic.MobilityShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.mobility.combining.MobilityShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.mobility.spatial.MobilityShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.datalinkactivity.DataLinkVisualizerEnablingWiredShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.datalinkactivity.DataLinkVisualizerFilteringShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.interfacetable.InterfaceTableVisualizationEnablingVisualizationShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.mobility.MobilityVisualizerShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.networkpathactivity.NetworkPathComplexShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.networkpathactivity.NetworkPathSimpleShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.packetdrop.PacketDropInterfaceNotConnectedShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.packetdrop.PacketDropNoRouteToDestinationShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.routingtable.RoutingTableVisualizationDisplayingAllShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.routingtable.RoutingTableVisualizationFilteringShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.transportconnection.TransportConnectionVisualizationEnablingShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.transportconnection.TransportConnectionVisualizationMultipleConnectionsShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.transportpathactivity.TransportPathVisualizerFilteringShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.canvas.transportpathactivity.TransportPathVisualizerSimpleWiredShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.visualizer.osg.networknode.NetworkNodeVisualizerShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.aggregation.AggregationShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.blockack.BlockAckShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.fragmentation.FragmentationShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.ieee802154.Ieee802154Showcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee802154.Ieee802154NarrowbandInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.qos.QosShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.showcases.wireless.txop.TxopShowcase": {
  "CALL": [
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.transportlayer.tcp_common.TcpCrcInsertionHook": {
  "PACKET": [
   {
    "packetAction": "eraseAtFront",
    "chunkType": ""
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.transportlayer.tcp_lwip.TcpLwip": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::registerHook",
    "info": "registerHook()"
   }
  ],
  "INPUT": [
   {
    "gate": "appIn",
    "msg": "inet::Packet",
    "kind": "4 (inet::TcpCommandCode::TCP_C_SEND)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "1 (inet::TcpCommandCode::TCP_C_OPEN_ACTIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "2 (inet::TcpCommandCode::TCP_C_OPEN_PASSIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "3 (inet::TcpCommandCode::TCP_C_ACCEPT)",
    "ctrl": "inet::TcpAcceptCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolInd",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "trimFront",
    "chunkType": ""
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "lwip_fast_timer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   }
  ]
 },
 "inet.transportlayer.tcp_nsc.TcpNsc": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::registerHook",
    "info": "registerHook()"
   }
  ],
  "INPUT": [
   {
    "gate": "appIn",
    "msg": "inet::Packet",
    "kind": "4 (inet::TcpCommandCode::TCP_C_SEND)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "1 (inet::TcpCommandCode::TCP_C_OPEN_ACTIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "2 (inet::TcpCommandCode::TCP_C_OPEN_PASSIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "3 (inet::TcpCommandCode::TCP_C_ACCEPT)",
    "ctrl": "inet::TcpAcceptCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::PacketProtocolTag",
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::PacketProtocolTag",
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "trimFront",
    "chunkType": ""
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "nsc_nsi_timer",
    "context": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   }
  ]
 },
 "inet.transportlayer.tcp.Tcp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::registerHook",
    "info": "registerHook()"
   },
   {
    "call to": "inet.transportlayer.tcp.TcpConnection",
    "function": "inet::tcp::TcpConnection::initConnection",
    "info": "initConnection"
   },
   {
    "call to": "inet.transportlayer.tcp.TcpConnection",
    "function": "inet::tcp::TcpConnection::processAppCommand",
    "info": "processAppCommand"
   },
   {
    "call to": "inet.transportlayer.tcp.TcpConnection",
    "function": "inet::tcp::TcpConnection::processTCPSegment",
    "info": "processTCPSegment"
   }
  ],
  "INPUT": [
   {
    "gate": "appIn",
    "msg": "inet::Packet",
    "kind": "4 (inet::TcpCommandCode::TCP_C_SEND)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "1 (inet::TcpCommandCode::TCP_C_OPEN_ACTIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "2 (inet::TcpCommandCode::TCP_C_OPEN_PASSIVE)",
    "ctrl": "inet::TcpOpenCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "3 (inet::TcpCommandCode::TCP_C_ACCEPT)",
    "ctrl": "inet::TcpAcceptCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "5 (inet::TcpCommandCode::TCP_C_CLOSE)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "3 (inet::TcpStatusInd::TCP_I_AVAILABLE)",
    "ctrl": "inet::TcpAvailableInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "4 (inet::TcpStatusInd::TCP_I_ESTABLISHED)",
    "ctrl": "inet::TcpConnectInfo",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "5 (inet::TcpStatusInd::TCP_I_PEER_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "6 (inet::TcpStatusInd::TCP_I_CLOSED)",
    "ctrl": "inet::TcpCommand",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "1 (inet::TcpStatusInd::TCP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::EcnReq",
     "inet::L3AddressReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "peekAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekDataAsBytes",
    "chunkType": ""
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::EcnInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   }
  ]
 },
 "inet.transportlayer.tcp.TcpConnection": {
  "CALL": [
   {
    "call to": "inet.transportlayer.tcp.TcpConnection",
    "function": "inet::tcp::TcpConnection::initClonedConnection",
    "info": "initClonedConnection"
   },
   {
    "call to": "inet.transportlayer.tcp.TcpConnection",
    "function": "inet::tcp::TcpConnection::initConnection",
    "info": "initConnection"
   },
   {
    "call to": "inet.transportlayer.tcp.Tcp",
    "function": "inet::tcp::Tcp::sendFromConn",
    "info": "sendFromConn"
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::ByteCountChunk"
   },
   {
    "packetAction": "insertAtBack",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::tcp::TcpHeader"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   }
  ],
  "SCHEDULE": [
   {
    "msg": "omnetpp::cMessage",
    "kind": "0",
    "ctrl": "",
    "tags": [],
    "msgname": "REXMIT",
    "context": "filled"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::EcnReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::SocketInd"
   }
  ]
 },
 "inet.transportlayer.udp.Udp": {
  "CALL": [
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::arrived",
    "info": "arrived"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterProtocol",
    "info": "handleRegisterProtocol"
   },
   {
    "call to": "inet.common.MessageDispatcher",
    "function": "inet::MessageDispatcher::handleRegisterService",
    "info": "handleRegisterService"
   },
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetReceivedFromLower"
   },
   {
    "call to": "inet.common.packet.recorder.PcapRecorder",
    "function": "inet::PcapRecorder::receiveSignal",
    "info": "packetSentToLower"
   },
   {
    "call to": "inet.networklayer.ipv4.Ipv4",
    "function": "inet::Ipv4::registerHook",
    "info": "registerHook()"
   }
  ],
  "INPUT": [
   {
    "gate": "appIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::SocketReq",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpCommandCode::UDP_C_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::L4PortReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "1 (inet::UdpCommandCode::UDP_C_BIND)",
    "ctrl": "inet::UdpBindCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "2 (inet::UdpCommandCode::UDP_C_CONNECT)",
    "ctrl": "inet::UdpConnectCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "3 (inet::UdpCommandCode::UDP_C_SETOPTION)",
    "ctrl": "inet::UdpJoinMulticastGroupsCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "appIn",
    "msg": "inet::Request",
    "kind": "4 (inet::UdpCommandCode::UDP_C_CLOSE)",
    "ctrl": "inet::UdpCloseCommand",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::SocketReq"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::FragmentTag",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::TosInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   },
   {
    "gate": "ipIn",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::NetworkProtocolInd",
     "inet::PacketProtocolTag",
     "inet::TosInd"
    ]
   }
  ],
  "OUTPUT": [
   {
    "gate": "appOut",
    "msg": "inet::Indication",
    "kind": "2 (inet::UdpStatusInd::UDP_I_SOCKET_CLOSED)",
    "ctrl": "inet::UdpSocketClosedIndication",
    "tags": [
     "inet::SocketInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::FragmentTag",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd",
     "inet::UserPriorityInd",
     "inet::physicallayer::Ieee80211ChannelInd",
     "inet::physicallayer::Ieee80211ModeInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::ErrorRateInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SignalPowerInd",
     "inet::SignalTimeInd",
     "inet::SnirInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::Ieee802SapInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd",
     "inet::UserPriorityInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::MacAddressInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "appOut",
    "msg": "inet::Packet",
    "kind": "0 (inet::UdpStatusInd::UDP_I_DATA)",
    "ctrl": "",
    "tags": [
     "inet::DscpInd",
     "inet::EcnInd",
     "inet::HopLimitInd",
     "inet::InterfaceInd",
     "inet::L3AddressInd",
     "inet::L4PortInd",
     "inet::NetworkProtocolInd",
     "inet::SocketInd",
     "inet::TosInd",
     "inet::TransportProtocolInd"
    ]
   },
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DirectionTag",
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::MulticastReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd",
     "inet::VlanReq"
    ]
   },
   {
    "gate": "ipOut",
    "msg": "inet::Packet",
    "kind": "0",
    "ctrl": "",
    "tags": [
     "inet::DispatchProtocolReq",
     "inet::L3AddressReq",
     "inet::MulticastReq",
     "inet::PacketProtocolTag",
     "inet::TransportProtocolInd"
    ]
   }
  ],
  "PACKET": [
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::UdpHeader"
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": ""
   },
   {
    "packetAction": "peekDataAt",
    "chunkType": "inet::BytesChunk"
   },
   {
    "packetAction": "popAtFront",
    "chunkType": "inet::UdpHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L3AddressReq"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::L4PortInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "addTagIfAbsent",
    "tagType": "inet::TransportProtocolInd"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::MulticastReq"
   },
   {
    "tagAction": "addTag",
    "tagType": "inet::SocketInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceReq"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::MulticastReq"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::L3AddressInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::SocketReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::DispatchProtocolReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::L4PortReq"
   },
   {
    "tagAction": "removeTagIfPresent",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::PacketProtocolTag"
   },
   {
    "tagAction": "removeTag",
    "tagType": "inet::SocketReq"
   }
  ],
  "TAG": [
   {
    "tagAction": "getTagForUpdate",
    "tagType": "inet::Ipv4InterfaceData"
   }
  ]
 },
 "inet.transportlayer.udp.UdpCrcInsertionHook": {
  "PACKET": [
   {
    "packetAction": "eraseAtFront",
    "chunkType": ""
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::Ipv4Header"
   },
   {
    "packetAction": "insertAtFront",
    "chunkType": "inet::UdpHeader"
   },
   {
    "packetAction": "peekData",
    "chunkType": ""
   },
   {
    "packetAction": "removeAtFront",
    "chunkType": "inet::UdpHeader"
   }
  ],
  "STAG": [
   {
    "tagAction": "findTag",
    "tagType": "inet::InterfaceInd"
   },
   {
    "tagAction": "findTag",
    "tagType": "inet::NetworkProtocolInd"
   },
   {
    "tagAction": "getTag",
    "tagType": "inet::PacketProtocolTag"
   }
  ]
 },
 "inet.tutorials.configurator.ConfiguratorA": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.tutorials.configurator.ConfiguratorB": {
  "CALL": [
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.tutorials.wireless.WirelessA": {
  "CALL": [
   {
    "call to": "inet.linklayer.acking.AckingWirelessInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "inet.tutorials.wireless.WirelessB": {
  "CALL": [
   {
    "call to": "inet.linklayer.acking.AckingWirelessInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   }
  ]
 },
 "-=unknown=-": {
  "CALL": [
   {
    "call to": "inet.linklayer.acking.AckingWirelessInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetCsmaMac",
    "function": "inet::EthernetCsmaMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.basic.EthernetMac",
    "function": "inet::EthernetMac::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.EthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.LayeredEthernetInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ethernet.modular.EthernetCutthroughInterface",
    "function": "inet::EthernetCutthroughInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ieee80211.Ieee80211Interface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ieee802154.Ieee802154NarrowbandInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.loopback.LoopbackInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.Ppp",
    "function": "inet::Ppp::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.linklayer.ppp.PppInterface",
    "function": "inet::NetworkInterface::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.node.ethernet.EthernetHub",
    "function": "inet::physicallayer::WireJunction::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.physicallayer.wired.common.WireJunction",
    "function": "inet::physicallayer::WireJunction::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.DestreamingReceiver",
    "function": "inet::DestreamingReceiver::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.DestreamingReceiver",
    "function": "inet::DestreamingReceiver::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamingTransmitter",
    "function": "inet::StreamingTransmitter::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamingTransmitter",
    "function": "inet::StreamingTransmitter::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughReceiver",
    "function": "inet::StreamThroughReceiver::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughReceiver",
    "function": "inet::StreamThroughReceiver::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::receiveSignal",
    "info": "POST_MODEL_CHANGE"
   },
   {
    "call to": "inet.protocolelement.transceiver.StreamThroughTransmitter",
    "function": "inet::StreamThroughTransmitter::receiveSignal",
    "info": "PRE_MODEL_CHANGE"
   }
  ]
 }
}
